1. add new cron jobs.
2. address field in work_locations table
3. run this route

Route::get("/run",function() {

    // Find the user by email
    $specialReseller = User::where('email', 'kids20acc@gmail.com')->first();

    if ($specialReseller) {
        // Fetch the required permissions
        $permissions = Permission::whereIn('name', ['handle_self_registered_businesses'])->get();

        if ($permissions->isNotEmpty()) {
            // Assign the permissions to the user
            $specialReseller->givePermissionTo($permissions);
            echo "Permissions assigned successfully.";
        } else {
            echo "Permissions not found.";
        }
    } else {
        echo "User not found.";
    }
            return "ok";
        });

4. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `payrolls` DROP FOREIGN KEY `payrolls_payrun_id_foreign`;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `payrolls`
ADD CONSTRAINT `payrolls_payrun_id_foreign` FOREIGN KEY (`payrun_id`) REFERENCES `payruns`(`id`) ON DELETE CASCADE;

5. emailer_logs table upload to db

6. ALTER TABLE `work_locations` ADD `latitude` VARCHAR(255) NULL DEFAULT NULL AFTER `updated_at`, ADD `longitude` VARCHAR(255) NULL DEFAULT NULL AFTER `latitude`, ADD `is_location_enabled` BOOLEAN NOT NULL AFTER `longitude`;


7. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `users` DROP FOREIGN KEY `users_designation_id_foreign`;
step 2 ALTER TABLE `users`
MODIFY `designation_id` INT NULL;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `users`
ADD CONSTRAINT `users_designation_id_foreign` FOREIGN KEY (`designation_id`) REFERENCES `users`(`id`) ON DELETE set null;

8 insert table user_work_locations
9. run query
Route::get("/run",function() {


    $users = User::whereNotNull("work_location_id")->get();
    foreach($users as $user){
        UserWorkLocation::create([
            "user_id" => $user->id,
            "work_location_id" => $user->work_location_id
        ]);
    }
            return "ok";
        });






10. insert work_shift_locations table
11. ALTER TABLE `work_locations` ADD `is_geo_location_enabled` BOOLEAN NOT NULL AFTER `is_location_enabled`, ADD `is_ip_enabled` BOOLEAN NOT NULL AFTER `is_geo_location_enabled`, ADD `max_radius` DOUBLE NULL AFTER `is_ip_enabled`, ADD `ip_address` VARCHAR(255) NULL AFTER `max_radius`;


12. ALTER TABLE `holidays`
ADD `status` VARCHAR(100) NOT NULL DEFAULT 'pending_approval' AFTER `updated_at`;

UPDATE `holidays` SET `status` = 'approved' WHERE `status` IS NULL;


13. import attendance_projects  and attendance_history_projects

14. https://developement.hrm-backend.interactivehr.co.uk/roleRefresh



15. Route::get("/run",function() {


    $attendances = Attendance::whereNotNull("project_id")->get();
    foreach($attendances as $attendance){
        AttendanceProject::create([
            "attendance_id" => $attendance->id,
            "project_id" => $attendance->project_id
        ]);
    }
            return "ok";
        });


16. ALTER TABLE attendance_projects
DROP FOREIGN KEY attendance_projects_project_id_foreign;

ALTER TABLE attendance_projects
MODIFY project_id BIGINT UNSIGNED NULL;

ALTER TABLE attendance_projects
ADD CONSTRAINT attendance_projects_project_id_foreign
FOREIGN KEY (project_id)
REFERENCES projects(id)
ON DELETE SET NULL;


ALTER TABLE attendance_projects
ADD CONSTRAINT attendance_projects_project_id_foreign
FOREIGN KEY (project_id)
REFERENCES projects(id)
ON DELETE SET NULL;

17 Route::get("/run", function() {
    // Get all attendances with non-null project_id using a single query
    $attendances = Attendance::whereNotNull("project_id")->get();

    // Prepare data for bulk insertion
    $attendanceProjects = [];
    foreach ($attendances as $attendance) {
        // Check if project exists, otherwise insert null
        $project = Project::find($attendance->project_id);
        $projectId = $project ? $attendance->project_id : null;

        $attendanceProjects[] = [
            "attendance_id" => $attendance->id,
            "project_id" => $projectId
        ];
    }

    // Bulk insert into AttendanceProject table
    AttendanceProject::insert($attendanceProjects);

    return "ok";
});

18. ALTER TABLE `setting_attendances` ADD `is_geolocation_enabled` BOOLEAN NULL DEFAULT NULL AFTER `updated_at`;

19. import candidate_job_platforms table

20. -- Add the new columns to the table
ALTER TABLE `recruitment_processes`
ADD `use_in_employee` BOOLEAN NOT NULL DEFAULT TRUE AFTER `updated_at`,
ADD `use_in_on_boarding` BOOLEAN NOT NULL DEFAULT TRUE AFTER `use_in_employee`;

-- Update all existing records to set the new fields to TRUE (1)
UPDATE `recruitment_processes`
SET `use_in_employee` = TRUE,
    `use_in_on_boarding` = TRUE;


21. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `users` DROP FOREIGN KEY `users_employment_status_id_foreign`;
step 2 ALTER TABLE `users`
MODIFY `employment_status_id` BIGINT UNSIGNED NULL;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `users`
ADD CONSTRAINT `users_employment_status_id_foreign` FOREIGN KEY (`employment_status_id`) REFERENCES `employment_statuses`(`id`) ON DELETE set null;


22. ALTER TABLE attendance_arrears DROP FOREIGN KEY attendance_arrears_attendance_id_foreign;
ALTER TABLE attendance_arrears ADD CONSTRAINT attendance_arrears_attendance_id_foreign FOREIGN KEY (attendance_id) REFERENCES attendances(id) ON DELETE CASCADE;


23. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE user_recruitment_processes DROP FOREIGN KEY user_recruitment_processes_recruitment_process_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE user_recruitment_processes ADD CONSTRAINT user_recruitment_processes_recruitment_process_id_foreign FOREIGN KEY (recruitment_process_id) REFERENCES recruitment_processes(id) ON DELETE CASCADE;


24. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_attendances DROP FOREIGN KEY payroll_attendances_attendance_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_attendances ADD CONSTRAINT payroll_attendances_attendance_id_foreign FOREIGN KEY (attendance_id) REFERENCES attendances(id) ON DELETE CASCADE;

25. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_holidays DROP FOREIGN KEY payroll_holidays_holiday_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_holidays ADD CONSTRAINT payroll_holidays_holiday_id_foreign FOREIGN KEY (holiday_id) REFERENCES holidays(id) ON DELETE CASCADE;


26. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_leave_records DROP FOREIGN KEY payroll_leave_records_leave_record_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_leave_records ADD CONSTRAINT payroll_leave_records_leave_record_id_foreign FOREIGN KEY (leave_record_id) REFERENCES leave_records(id) ON DELETE CASCADE;


27. Route::get("/run", function() {
    $role = Role::where('name','reseller')->first();

    $permission = Permission::where('name', "bank_create")->first();

        $role->givePermissionTo($permission);


    return "ok";
});

28 FRONT_END_VERSION=red
29. candidate_Recruitment_processeses import table

30. Route::get("/run", function() {
    // Fetch all users in chunks to handle large data sets efficiently
    User::chunk(100, function($users) {
        foreach ($users as $user) {
            // Fetch all DepartmentUser records for the user, ordered by creation date
            $departmentUsers = DepartmentUser::where('user_id', $user->id)
                                              ->orderBy('created_at')
                                              ->get();

            // Check if there are more than one records
            if ($departmentUsers->count() > 1) {
                // Get the IDs of the records to delete, excluding the first one
                $idsToDelete = $departmentUsers->skip(1)->pluck('id');

                // Bulk delete the records
                DepartmentUser::whereIn('id', $idsToDelete)->delete();
            }
        }
    });

    return "ok";
});




hr compliance 14 ->


hrm, hrm-produ 28 ->
